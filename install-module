#!/bin/bash

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

source "${SCRIPT_DIR}"/loggers

# NOTE: not to be exported (for now)
function _verify_module() {
    local module_path=${1}

    # TODO: where to send output of verification script?
    bash -c "${module_path}/verify.sh" 2>&1
    local result=$?

    return $result
}

function install_module() {
    local module_path=${1}
    local module_name="$(basename "${module_path}")"

    if [ ! -d "${module_path}" ]; then
        log_error "Module doesn't exist: ${module_name}"
        return 1
    fi

    # verify and install dependencies
    # TODO: check for dependency cycles?
    while read -r line; do
        # reassignment to local variable prevents overwriting in nested calls
        local dependency_name="${line}"
        local dependency_path="${SCRIPT_DIR}/modules/${dependency_name}"
        log_debug "Checking dependency: ${dependency_name}"

        set +e
        install_module "${dependency_path}"
        local result=$?
        set -e

        if [ $result -gt 0 ]; then
            # TODO: why is the variable containing dep name being dropped...?
            log_error "Failed to install dependency: ${dependency_name}"
            return 1
        fi
    done < "${module_path}/dependencies.txt"

    if [ ! -x "${module_path}/verify.sh" ]; then
        log_error "Module '${module_name}' is invalid because it doesn't have a 'verify.sh'"
        return 1
    fi

    # run verification script to see if module has already been installed
    set +e
    _verify_module "${module_path}"
    local result=$?
    set -e
    if [ $result -eq 0 ]; then
        log_info "Module '${module_name}' is already installed"
        return 0
    fi

    # execute installation script
    log_info "Begin output from installation of module '${module_name}'"
    set +e
    bash -c "${module_path}/install.sh"
    result=$?
    set -e
    log_info "End output from installation of module '${module_name}'"
    if [ $result -gt 0 ]; then
        log_error "Failed to install module '${module_name}'"
        return 1
    fi

    # re-run verification to confirm installation has _actually_ succeeded
    set +e
    _verify_module "${module_path}"
    result=$?
    set -e
    if [ $result -gt 0 ]; then
        log_error "Module '${module_name}' was installed, but installation is invalid"
        return 1
    fi

    log_info "Successfully installed module '${module_name}'"
}
